type User {
  _id: ID!
  name: String!
  email: String!
  password: String!
  updated: Boolean!
  role: ROLES!
  status: STATUS!
}

type Questionnaire {
  studentState: String!
  name: String!
  email: String!
  postalAddress: String!
  pincode: String!
  contactNumber: String!
  whatsappNumber: String!
  city: String!
  collegeState: String!
  collegeName: String!
  collegeAddress: String!
  degree: String!
  branch: String!
  year:String!
  collegeCity: String!
  socialMediaSites: String!
  fbLink: String!
  whyDoYouWish: String!
  areYouTheRightCandidate: String!
  pastExperience: String!
  previousCA: Boolean!
  previousCAYear: String
  userId: ID!
  status: STATUS!
}

type Query {
  me: User!
  questionnaire: [Questionnaire!]!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  login(data: LoginInput!): AuthPayload!
  deleteUser(_id: ID!): String!
  updateQuestionnaire(data: UpdateQuestionnaireInput!): Message!
  changeStatus(data: ChangeStatusInput!): Message!
}

input LoginInput {
  email: String!
  password: String!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input UpdateQuestionnaireInput {
  studentState: String!
  name: String!
  email: String!
  postalAddress: String!
  pincode: String!
  contactNumber: String!
  whatsappNumber: String!
  city: String!
  collegeState: String!
  collegeName: String!
  collegeAddress: String!
  degree: String!
  branch: String!
  year:String!
  collegeCity: String!
  socialMediaSites: String!
  fbLink: String!
  whyDoYouWish: String!
  areYouTheRightCandidate: String!
  pastExperience: String!
  previousCA: Boolean!
  previousCAYear: String
}

input ChangeStatusInput {
  userId: ID!
  type: String!
}

type AuthPayload {
  user: User
  token: String
}

type Message {
  success: Boolean!
  message: String!
}

enum ROLES {
  CA
  ADMIN
}

enum STATUS {
  SELECTED
  REJECTED
  PENDING
}